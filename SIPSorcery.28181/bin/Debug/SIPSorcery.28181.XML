<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SIPSorcery.28181</name>
    </assembly>
    <members>
        <member name="M:SIPSorcery.GB28181.Net.DNSManager.LookupAsync(System.String)">
            <summary>
            Does a lookup on the DNSManager's currently cached entries. If not found it returns null indicating no information is currently available on the 
            host while at the same time queueing a lookup for the DNSManager to do a lookup. Once the lookup has been completed the entry will be stored in
            cache and available for subsequent lookup requests. 
            
            This approach to lookups is very useful for some SIP request situations. SIP has a built in retransmit mechanism so rather than hold up the processing
            of a SIP request while a DNS lookup is done the request can be ignored and in the time it takes for the SIP request retransmit the lookup can be done.
            </summary>
            <param name="hostname">The hostname of the A record to lookup in DNS.</param>
            <returns>If null is returned it means this is the first lookup for this hostname. The caller should wait a few seconds and call the method again.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.DNSManager.Lookup(System.String,Heijden.DNS.DNSQType,System.Int32,System.Collections.Generic.List{System.Net.IPEndPoint})">
            <summary>
            This method will wait until either the lookup completes or the timeout is reached before returning.
            </summary>
            <param name="hostname">The hostname of the A record to lookup in DNS.</param>
            <param name="timeout">Timeout in seconds for the lookup.</param>
            <returns></returns>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.Questions">
            <summary>
            List of Question records
            </summary>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.Answers">
            <summary>
            List of AnswerRR records
            </summary>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.Authorities">
            <summary>
            List of AuthorityRR records
            </summary>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.Additionals">
            <summary>
            List of AdditionalRR records
            </summary>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.Error">
            <summary>
            Error message, empty when no error
            </summary>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.MessageSize">
            <summary>
            The Size of the message
            </summary>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.TimeStamp">
            <summary>
            TimeStamp when cached
            </summary>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.Server">
            <summary>
            Server which delivered this response
            </summary>
        </member>
        <member name="F:Heijden.DNS.DNSResponse.Timedout">
            <summary>
            True if the DNS request timed out before a response was received.
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordsMX">
            <summary>
            List of RecordMX in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordsTXT">
            <summary>
            List of RecordTXT in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordsA">
            <summary>
            List of RecordA in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordsPTR">
            <summary>
            List of RecordPTR in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordsCNAME">
            <summary>
            List of RecordCNAME in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordsAAAA">
            <summary>
            List of RecordAAAA in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordNAPTR">
            <summary>
            List of RecordNATPR in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordSRV">
            <summary>
            List of RecordSRV in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordsNS">
            <summary>
            List of RecordNS in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.DNSResponse.RecordsSOA">
            <summary>
            List of RecordSOA in Response.Answers
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.ID">
            <summary>
            An identifier assigned by the program
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.QDCOUNT">
            <summary>
            the number of entries in the question section
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.ANCOUNT">
            <summary>
            the number of resource records in the answer section
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.NSCOUNT">
            <summary>
            the number of name server resource records in the authority records section
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.ARCOUNT">
            <summary>
            the number of resource records in the additional records section
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.Data">
            <summary>
            Represents the header as a byte array
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.QR">
            <summary>
            query (false), or a response (true)
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.OPCODE">
            <summary>
            Specifies kind of query
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.AA">
            <summary>
            Authoritative Answer
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.TC">
            <summary>
            TrunCation
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.RD">
            <summary>
            Recursion Desired
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.RA">
            <summary>
            Recursion Available
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.Z">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.RCODE">
            <summary>
            Response code
            </summary>
        </member>
        <member name="F:Heijden.DNS.Record.RR">
            <summary>
            The Resource Record this RDATA record belongs to
            </summary>
        </member>
        <member name="T:Heijden.DNS.Resolver">
            <summary>
            Resolver is the main class to do DNS query lookups
            </summary>
        </member>
        <member name="F:Heijden.DNS.Resolver.Version">
            <summary>
            Version of this set of routines, when not in a library
            </summary>
        </member>
        <member name="F:Heijden.DNS.Resolver.DefaultPort">
            <summary>
            Default DNS port
            </summary>
        </member>
        <member name="F:Heijden.DNS.Resolver.DefaultDnsServers">
            <summary>
            Gets list of OPENDNS servers
            </summary>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.Net.IPEndPoint[])">
            <summary>
            Constructor of Resolver using DNS servers specified.
            </summary>
            <param name="DnsServers">Set of DNS servers</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.Net.IPEndPoint)">
            <summary>
            Constructor of Resolver using DNS server specified.
            </summary>
            <param name="DnsServer">DNS server to use</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructor of Resolver using DNS server and port specified.
            </summary>
            <param name="ServerIpAddress">DNS server to use</param>
            <param name="ServerPortNumber">DNS port to use</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.String,System.Int32)">
            <summary>
            Constructor of Resolver using DNS address and port specified.
            </summary>
            <param name="ServerIpAddress">DNS server address to use</param>
            <param name="ServerPortNumber">DNS port to use</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.String)">
            <summary>
            Constructor of Resolver using DNS address.
            </summary>
            <param name="ServerIpAddress">DNS server address to use</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor">
            <summary>
            Resolver constructor, using DNS servers specified by Windows
            </summary>
        </member>
        <member name="M:Heijden.DNS.Resolver.ClearCache">
            <summary>
            Clear the resolver cache
            </summary>
        </member>
        <member name="M:Heijden.DNS.Resolver.UdpRequest(Heijden.DNS.DNSRequest,System.Collections.Generic.List{System.Net.IPEndPoint},System.Int32)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="timeout">Timeout for lookup in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.TcpRequest(Heijden.DNS.DNSRequest,System.Collections.Generic.List{System.Net.IPEndPoint},System.Int32)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="timeout">Timeout for lookup in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.QueryCache(System.String,Heijden.DNS.DNSQType)">
            <summary>
            Do an QClass=IN Query on the previously cached results.
            </summary>
            <param name="name">Name to query</param>
            <param name="qtype">Question type</param>
            <returns>Response of the query</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.QueryCache(System.String,Heijden.DNS.DNSQType,Heijden.DNS.QClass)">
            <summary>
            Do an QClass=IN Query on the previously cached results.
            </summary>
            <param name="name">Name to query</param>
            <param name="qtype">Question type</param>
            <returns>Response of the query</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.Query(System.String,Heijden.DNS.DNSQType,Heijden.DNS.QClass,System.Int32)">
            <summary>
            Do Query on specified DNS servers
            </summary>
            <param name="name">Name to query</param>
            <param name="qtype">Question type</param>
            <param name="timeout">Timeout for lookup in seconds.</param>
            <param name="qclass">Class type</param>
            <returns>Response of the query</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.Query(System.String,Heijden.DNS.DNSQType,System.Int32)">
            <summary>
            Do an QClass=IN Query on specified DNS servers
            </summary>
            <param name="name">Name to query</param>
            <param name="qtype">Question type</param>
            <param name="timeout">Timeout for lookup in seconds.</param>
            <returns>Response of the query</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetDnsServers">
            <summary>
            Gets a list of default DNS servers used on the Windows machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetArpaFromIp(System.Net.IPAddress)">
            <summary>
            Translates the IPV4 or IPV6 address into an arpa address
            </summary>
            <param name="ip">IP address to get the arpa address form</param>
            <returns>The 'mirrored' IPV4 or IPV6 arpa address</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetHostEntry(System.Net.IPAddress)">
             <summary>
            		Resolves an IP address to an System.Net.IPHostEntry instance.
             </summary>
             <param name="ip">An IP address.</param>
             <returns>
            		An System.Net.IPHostEntry instance that contains address information about
            		the host specified in address.
            </returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetHostEntry(System.String)">
             <summary>
            		Resolves a host name or IP address to an System.Net.IPHostEntry instance.
             </summary>
             <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
             <returns>
            		An System.Net.IPHostEntry instance that contains address information about
            		the host specified in hostNameOrAddress. 
            </returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)">
             <summary>
             Asynchronously resolves a host name or IP address to an System.Net.IPHostEntry instance.
             </summary>
             <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
             <param name="requestCallback">
            		An System.AsyncCallback delegate that references the method to invoke when
            		the operation is complete.
            </param>
             <param name="stateObject">
            		A user-defined object that contains information about the operation. This
            		object is passed to the requestCallback delegate when the operation is complete.
             </param>
             <returns>An System.IAsyncResult instance that references the asynchronous request.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously resolves an IP address to an System.Net.IPHostEntry instance.
            </summary>
            <param name="ip">The IP address to resolve.</param>
            <param name="requestCallback">
            	An System.AsyncCallback delegate that references the method to invoke when
            	the operation is complete.
            </param>
            <param name="stateObject">
            	A user-defined object that contains information about the operation. This
                object is passed to the requestCallback delegate when the operation is complete.
            </param>
            <returns>An System.IAsyncResult instance that references the asynchronous request.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.EndGetHostEntry(System.IAsyncResult)">
             <summary>
             Ends an asynchronous request for DNS information.
             </summary>
             <param name="AsyncResult">
            		An System.IAsyncResult instance returned by a call to an 
            		Overload:Heijden.Dns.Resolver.BeginGetHostEntry method.
             </param>
             <returns>
            		An System.Net.IPHostEntry instance that contains address information about
            		the host. 
            </returns>
        </member>
        <member name="E:Heijden.DNS.Resolver.OnVerbose">
            <summary>
            Verbose messages from internal operations
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.Retries">
            <summary>
            Gets or sets number of retries before giving up
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.Recursion">
            <summary>
            Gets or set recursion for doing queries
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.TransportType">
            <summary>
            Gets or sets protocol to use
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.DnsServers">
            <summary>
            Gets or sets list of DNS servers to use
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.DnsServer">
            <summary>
            Gets first DNS server address or sets single DNS server to use
            </summary>
        </member>
        <member name="T:Heijden.DNS.RR">
            <summary>
            Resource Record (rfc1034 3.6.)
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.NAME">
            <summary>
            The name of the node to which this resource record pertains
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.Type">
            <summary>
            Specifies type of resource record
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.Class">
            <summary>
            Specifies type class of resource record, mostly IN but can be CS, CH or HS 
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.RDLENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.RECORD">
            <summary>
            One of the Record* classes
            </summary>
        </member>
        <member name="P:Heijden.DNS.RR.TTL">
            <summary>
            Time to live, the time interval that the resource record may be cached
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTCPReportSampler.RecordRTPReceive(System.DateTime,System.UInt16,System.Int64,System.UInt32)">
            <summary>
            Records the arrival of a new RTP packet and periodically samples the mesaurements to record the characteristics of the RTP stream.
            </summary>
            <param name="sequenceNumber">RTP header sequence number, monotonically increasing in RTP stream.</param>
            <param name="sendTime">The remote time at which the RTP packet was sent.</param>
            <param name="receiveTime">The local time at which the RTP listener received the packet.</param>
            <param name="bytesReceived">Number of bytes received.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTCPReportSampler.CheckForAvailableSample(System.UInt16)">
            <summary>
            A sample is taken if the last RTP measurement recorded is 4x the sample time since the last last smaple was taken.
            The 4x is needed in order to be able to take into account late arriving packets as out of order rather then as drops.
            </summary>
            <param name="sequenceNumber"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTCPReportSampler.Sample(System.UInt16,System.UInt16,System.TimeSpan)">
            <summary>
            All times passed into this method should already be UTC.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTCPHeader.#ctor(System.Byte[])">
            <summary>
            Extract and load the RTP header from an RTP packet.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTCPReportHeader.#ctor(System.Byte[])">
            <summary>
            Extract and load the RTCPReportHeader from packet.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.Start">
            <summary>
            Starts listenting on the RTP and control ports.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.Close">
            <summary>
            Closes the session's RTP and control ports.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.SetFrameType(SIPSorcery.GB28181.Net.FrameTypesEnum)">
            <summary>
            Video frames use a header at the start of the RTP payload in order to break up a single video
            frame into multiple RTP packets. The RTP channel will need to know the type of header being
            used in order to determine when a full frame has been received.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.SendAudioFrame(System.Byte[],System.UInt32,System.Int32)">
            <summary>
            Sends an audio frame where the payload size is less than the maximum RTP packet payload size.
            </summary>
            <param name="payload">The audio payload to transmit.</param>
            <param name="frameSpacing">The increment to add to the RTP timestamp for each new frame.</param>
            <param name="payloadType">The payload type to set on the RTP packet.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.SendJpegFrame(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper method to send a low quality JPEG image over RTP. This method supports a very abbreviated version of RFC 2435 "RTP Payload Format for JPEG-compressed Video".
            It's intended as a quick convenient way to send something like a test pattern image over an RTSP connection. More than likely it won't be suitable when a high
            quality image is required since the header used in this method does not support quantization tables.
            </summary>
            <param name="jpegBytes">The raw encoded bytes of teh JPEG image to transmit.</param>
            <param name="jpegQuality">The encoder quality of the JPEG image.</param>
            <param name="jpegWidth">The width of the JPEG image.</param>
            <param name="jpegHeight">The height of the JPEG image.</param>
            <param name="framesPerSecond">The rate at which the JPEG frames are being transmitted at. used to calculate the timestamp.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.SendH264Frame(System.Byte[],System.UInt32,System.Int32)">
            <summary>
            H264 frames need a two byte header when transmitted over RTP.
            </summary>
            <param name="frame">The H264 encoded frame to transmit.</param>
            <param name="frameSpacing">The increment to add to the RTP timestamp for each new frame.</param>
            <param name="payloadType">The payload type to set on the RTP packet.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.SendVP8Frame(System.Byte[],System.UInt32,System.Int32)">
            <summary>
            Sends a dynamically sized frame. The RTP marker bit will be set for the last transmitted packet in the frame.
            </summary>
            <param name="frame">The frame to transmit.</param>
            <param name="frameSpacing">The increment to add to the RTP timestamp for each new frame.</param>
            <param name="payloadType">The payload type to set on the RTP packet.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.SendRTPRaw(System.Byte[])">
            <summary>
            Sends a packet to the RTSP server on the RTP socket.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.DateTimeToNptTimestamp(System.DateTime)">
            <summary>
            Converts specified DateTime value to long NPT time.
            </summary>
            <param name="value">DateTime value to convert. This value must be in local time.</param>
            <returns>Returns NPT value.</returns>
            <notes>
            Wallclock time (absolute date and time) is represented using the
            timestamp format of the Network Time Protocol (NPT), which is in
            seconds relative to 0h UTC on 1 January 1900 [4].  The full
            resolution NPT timestamp is a 64-bit unsigned fixed-point number with
            the integer part in the first 32 bits and the fractional part in the
            last 32 bits. In some fields where a more compact representation is
            appropriate, only the middle 32 bits are used; that is, the low 16
            bits of the integer part and the high 16 bits of the fractional part.
            The high 16 bits of the integer part must be determined independently.
            </notes>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPChannel.CreateLowQualityRtpJpegHeader(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Utility function to create RtpJpegHeader either for initial packet or template for further packets
            
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Type-specific |              Fragment Offset                  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type     |       Q       |     Width     |     Height    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
            <param name="fragmentOffset"></param>
            <param name="quality"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPFrame.MakeSinglePacketFrame(SIPSorcery.GB28181.Net.RTPPacket)">
            <summary>
            Audio frames are generally contained within a single RTP packet. This method is a shortcut
            to construct a frame from a single RTP packet.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPHeader.#ctor(System.Byte[])">
            <summary>
            Extract and load the RTP header from an RTP packet.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.RTPSink">
            <summary>
            Threads used:
            1. ListenerThread to listen for incoming RTP packets on the listener socket,
            2. ListenerTimeoutThread shuts down the stream if a packet is not received in NO_RTP_TIMEOUT or if the stream's lifetime 
               exceeds RTPMaxStayAlive (and RTPMaxStayAlive has been set > 0),
            3. SenderThread sends RTP packets to remote socket.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTPSink.SendRTCPReport(SIPSorcery.GB28181.Net.RTCPReportTypesEnum,System.Byte[])">
            <summary>
            Sends an RTCP report to the remote agent.
            </summary>
            <param name="rtcpReport"></param>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.RTPVP8Header">
            <summary>
            Exmaples of size Payload Header size calculations:
            
            For length of first parition 54: S0 = 4, S1 = 0x32, S2 = 0.
            For length of first parition 1777: S0 = 1, S1 = 0xde, S2 = 0.
            
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.AssemblyStreamState">
            <summary>
            This class maintains static application configuration settings that can be used by all classes within
            the AppDomain. This class is the one stop shop for retrieving or accessing application configuration settings.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.Mjpeg.CreateQuantizationTables(System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Creates a Luma and Chroma Table in ZigZag order using the default quantizer
            </summary>
            <param name="Q">The quality factor</param>
            <returns>64 luma bytes and 64 chroma</returns>
        </member>
        <!-- 对于成员“M:SIPSorcery.GB28181.Net.Mjpeg.CreateQuantizationTablesMarker(System.ArraySegment{System.Byte},System.Byte)”忽略有格式错误的 XML 注释 -->
        <member name="M:SIPSorcery.GB28181.Net.Mjpeg.ProcessMjpegFrame(System.Collections.Generic.List{SIPSorcery.GB28181.Net.RTPPacket})">
            <summary>
            Writes the packets to a memory stream and creates the default header and quantization tables if necessary.
            Assigns Image from the result
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPClient.Play">
            <summary>
            Send a PLAY request to the RTSP server to commence the media stream.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPClient.Teardown">
            <summary>
            Sends the RTSP teardown request for an existing RTSP session.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPClient.Close">
            <summary>
            Closes the session and the RTSP connection to the server.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPClient.SendKeepAlives">
            <summary>
            Sends a keep-alive packet to keep the RTSP RTP connection from being shut.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPConnection.SocketReadCompleted(System.Int32)">
            <summary>
            Processes the receive buffer after a read from the connected socket.
            </summary>
            <param name="bytesRead">The number of bytes that were read into the receive buffer.</param>
            <returns>True if the receive was processed correctly, false if the socket returned 0 bytes or was disconnected.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPConnection.ProcessReceive(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Processes a buffer from a TCP read operation to extract the first full RTSP message. If no full RTSP 
            messages are available it returns null which indicates the next read should be appended to the current
            buffer and the process re-attempted.
            </summary>
            <param name="receiveBuffer">The buffer to check for the RTSP message in.</param>
            <param name="start">The position in the buffer to start parsing for an RTSP message.</param>
            <param name="length">The position in the buffer that indicates the end of the received bytes.</param>
            <returns>A byte array holding a full RTSP message or if no full RTSP messages are avialble null.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPConnection.GetContentLength(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Attempts to find the Content-Length header in an RTSP header and extract it.
            </summary>
            <param name="buffer">The buffer to search in.</param>
            <param name="start">The position in the buffer to start the serach from.</param>
            <param name="end">The position in the buffer to stop the search at.</param>
            <returns></returns>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.RTSPTransportHeader">
            <summary>
            Represents the Transport header used in RTSP requests and responses.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPTransportHeader.GetClientRTPPort">
            <summary>
            Attempts to determine the client RTP port based on the transport header attributes.
            </summary>
            <returns>The client port that RTP packets should be sent to. If the port cannot be determined then 0.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPTransportHeader.GetClientRtcpPort">
            <summary>
            Attempts to determine the client RTCP port based on the transport header attributes.
            </summary>
            <returns>The client port that RTCP packets should be sent to. If the port cannot be determined then 0.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPTransportHeader.GetServerRTPPort">
            <summary>
            Attempts to determine the server RTP port based on the transport header attributes.
            </summary>
            <returns>The server port that RTP packets should be sent to. If the port cannot be determined then 0.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPTransportHeader.GetServerRtcpPort">
            <summary>
            Attempts to determine the server Rtcp port based on the transport header attributes.
            </summary>
            <returns>The server port that RTCP packets should be sent to. If the port cannot be determined then 0.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.RTSPRequest">
            <summary>
            RFC2326 6.1:
            Request-Line = Method SP Request-URI SP RTSP-Version CRLF
            </summary>
        </member>
        <!-- 对于成员“T:SIPSorcery.GB28181.Net.RTSPResponse”忽略有格式错误的 XML 注释 -->
        <member name="M:SIPSorcery.GB28181.Net.RTSPServer.Initialise">
            <summary>
            Initialises and starts listening on the RTSP server socket.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPServer.Send(System.Net.IPEndPoint,System.String)">
            <summary>
            Sends a message to the RTSP client listening on the destination end point.
            </summary>
            <param name="destinationEndPoint">The destination to send the message to.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPServer.Send(System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Sends data to the RTSP client listening on the destination end point.
            </summary>
            <param name="destinationEndPoint">The destination to send the message to.</param>
            <param name="buffer">The data to send.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPServer.Close">
            <summary>
            Closes the RTSP server socket as well as any open sessions.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPServer.CreateRTSPSession(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Creates a new RTSP session and intialises the RTP and control sockets for the session.
            </summary>
            <param name="remoteEndPoint">The remote end point of the RTSP client that requested the RTSP session be set up.</param>
            <returns>An RTSP session object.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPServer.PruneConnections(System.String)">
            <summary>
            Periodically checks the established connections and closes any that have not had a transmission for a specified 
            period or where the number of connections allowed per IP address has been exceeded. 
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.ReservePorts">
            <summary>
            Attempts to reserve the RTP and control ports for the RTP session.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.Start">
            <summary>
            Starts listenting on the RTP and control ports.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.Close">
            <summary>
            Closes the session's RTP and control ports.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.SendJpegFrame(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper method to send a low quality JPEG image over RTP. This method supports a very abbreviated version of RFC 2435 "RTP Payload Format for JPEG-compressed Video".
            It's intended as a quick convenient way to send something like a test pattern image over an RTSP connection. More than likely it won't be suitable when a high
            quality image is required since the header used in this method does not support quantization tables.
            </summary>
            <param name="jpegBytes">The raw encoded bytes of the JPEG image to transmit.</param>
            <param name="jpegQuality">The encoder quality of the JPEG image.</param>
            <param name="jpegWidth">The width of the JPEG image.</param>
            <param name="jpegHeight">The height of the JPEG image.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.SendH264Frame(System.Byte[],System.Int32)">
            <summary>
            H264 frames need a two byte header when transmitted over RTP.
            </summary>
            <param name="frame">The H264 encoded frame to transmit.</param>
            <param name="payloadType">The payload type to set on the RTP packet.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.SendVP8Frame(System.Byte[],System.Int32)">
            <summary>
            Sends a dynamically sized frame. The RTP marker bit will be set for the last transmitted packet in the frame.
            </summary>
            <param name="frame">The frame to transmit.</param>
            <param name="payloadType">The payload type to set on the RTP packet.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.SendRTPRaw(System.Byte[])">
            <summary>
            Sends a packet to the RTSP server on the RTP socket.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.DateTimeToNptTimestamp32(System.DateTime)">
            <summary>
            Recalculates the step that should be applied to the RTP timestamp based on the frame rate of the incoming samples.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.DateTimeToNptTimestamp(System.DateTime)">
            <summary>
            Converts specified DateTime value to long NPT time.
            </summary>
            <param name="value">DateTime value to convert. This value must be in local time.</param>
            <returns>Returns NPT value.</returns>
            <notes>
            Wallclock time (absolute date and time) is represented using the
            timestamp format of the Network Time Protocol (NPT), which is in
            seconds relative to 0h UTC on 1 January 1900 [4].  The full
            resolution NPT timestamp is a 64-bit unsigned fixed-point number with
            the integer part in the first 32 bits and the fractional part in the
            last 32 bits. In some fields where a more compact representation is
            appropriate, only the middle 32 bits are used; that is, the low 16
            bits of the integer part and the high 16 bits of the fractional part.
            The high 16 bits of the integer part must be determined independently.
            </notes>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.RTSPSession.CreateLowQualityRtpJpegHeader(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Utility function to create RtpJpegHeader either for initial packet or template for further packets
            
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Type-specific |              Fragment Offset                  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type     |       Q       |     Width     |     Height    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </summary>
            <param name="fragmentOffset"></param>
            <param name="quality"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:SIPSorcery.GB28181.Net.RTSPURL”忽略有格式错误的 XML 注释 -->
        <member name="T:SIPSorcery.GB28181.Net.STUNv2XORAddressAttribute">
            <summary>
            This attribue is the same as the mapped address attribute except the address details are XOR'ed with the STUN magic cookie. 
            THe reason for this is to stop NAT application layer gateways from doing string replacements of private IP adresses and ports.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.STUNv2ClassTypesEnum">
            <summary>
            Could not work out how the class and message type encoding work despite re-reading the paragraph in the RFC a dozen times!
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.STUNAppState">
            <summary>
            This class maintains static application configuration settings that can be used by all classes within
            the AppDomain. This class is the one stop shop for retrieving or accessing application configuration settings.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.STUNAddressAttribute">
             <summary>
             MAPPED-ADDRESS, RESPONSE-ADDRESS, CHANGED-ADDRESS, SOURCE-ADDRESS attributes use this format.
             The Send Keep Alive STUN request also uses an attribute with this format to specify the socket to send
             the Keep Alive to.
             
                 0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |x x x x x x x x|    Family     |           Port                |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                             Address                           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            
             </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Net.STUNChangeRequestAttribute">
             <summary>
              0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            
             The meaning of the flags is:
            
             A: This is the "change IP" flag.  If true, it requests the server
              to send the Binding Response with a different IP address than the
              one the Binding Request was received on.
            
             B: This is the "change port" flag.  If true, it requests the
              server to send the Binding Response with a different port than the
              one the Binding Request was received on.
            
             </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Net.WebRtcPeer.Initialise(System.String,System.Net.IPEndPoint)">
            <summary>
            
            </summary>
            <param name="dtlsCertificateFingerprint">The SHA256 fingerprint that gets placed in the SDP offer for this WebRTC peer. It must match the certificate being used
            in the DTLS negotiation.</param>
            <param name="turnServerEndPoint">An optional parameter that can be used include a TURN server in this peer's ICE candidate gathering.</param>
        </member>
        <!-- 对于成员“M:SIPSorcery.GB28181.Persistence.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:SIPSorcery.GB28181.Persistence.Evaluator.PartialEval(System.Linq.Expressions.Expression)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:SIPSorcery.GB28181.Persistence.Evaluator.SubtreeEvaluator”忽略有格式错误的 XML 注释 -->
        <member name="T:SIPSorcery.GB28181.Persistence.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPDomainManager">
            <summary>
            This class maintains a list of domains that are being maintained by this process.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPDomainManager.GetDomain(System.String,System.Boolean)">
            <summary>
            Checks whether there the supplied hostname represents a serviced domain or alias.
            </summary>
            <param name="host">The hostname to check for a serviced domain for.</param>
            <returns>The canconical domain name for the host if found or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPDomainManager.HasDomain(System.String,System.Boolean)">
            <summary>
            Checks whether a host name is in the list of supported domains and aliases.
            </summary>
            <param name="host"></param>
            <returns>True if the host is present as a domain or an alias, false otherwise.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Persistence.StorageLayer.QuerySecurityCheck(System.String)">
            <summary>
            Checks SQL queries to filter out ones that match an SQL injection attack.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.Persistence.StorageLayer.IsPooledConnectionString(System.String)">
            <summary>
            Used to determine whethe Npgsql will treat a connection string as pooling or not.
            Npgsql assumes a connection string is pooling by default.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Persistence.StorageLayer.ConvertToBool(System.Object)">
            <summary>
            
            </summary>
            <param name="column">Needs to be a bit data type from Postgresql.</param>
            <returns></returns>
        </member>
        <member name="T:SIPSorcery.GB28181.Servers.ISIPMonitorService">
            <summary>
            监控服务
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.RealVideoReq">
            <summary>
            实时视频请求
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.ByeVideoReq">
            <summary>
            取消实时视频请求
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.AckRequest(SIPSorcery.GB28181.SIP.SIPResponse)">
            <summary>
            确认接收实时视频请求
            </summary>
            <param name="response">sip响应</param>
            <returns>sip请求</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.Stop">
            <summary>
            停止监控服务
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.BadRequest(System.String,System.String)">
            <summary>
            失败的请求
            </summary>
            <param name="msg">失败消息</param>
            <param name="callId">呼叫编号</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.RecordFileQuery(System.DateTime,System.DateTime)">
            <summary>
            录像文件检索
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.BackVideoReq(System.DateTime,System.DateTime)">
            <summary>
            录像点播视频请求
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.BackVideoPlaySpeedControlReq(System.String,System.DateTime)">
            <summary>
            录像点播视频播放速度控制请求
            </summary>
            <param name="scale">播放快进比例</param>
            <param name="range">视频播放时间段</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.BackVideoContinuePlayingControlReq">
            <summary>
            录像点播视频继续播放控制请求
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.BackVideoPauseControlReq">
            <summary>
            录像点播视频暂停控制请求
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.ISIPMonitorService.BackVideoStopPlayingControlReq">
            <summary>
            录像点播视频停止播放控制请求
            </summary>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.ISIPMonitorService.OnSIPServiceChanged">
            <summary>
            sip服务状态
            </summary>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.ISIPMonitorService.OnStreamReady">
            <summary>
            视频流回调完成
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nEx">
            <summary>
            扩展字段，默认为1 
            当MediaFrameVersion 为0x00或0x01，则该字段：0为不可被丢弃(一般只有首帧是不可丢弃的。)，1为可被丢弃,
            当MediaFrameVersion为0xff时，该字段为命令类型，命令包不可丢弃
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nEncoder">
            <summary>
            编码器CODE
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nSPSLen">
            <summary>
            H264里面的SPS长度
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nPPSLen">
            <summary>
            H264里面的PPS长度
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nWidth">
            <summary>
            视频宽
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nHeight">
            <summary>
            视频高
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nFrequency">
            <summary>
            采样率,speex一般为8000
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nChannel">
            <summary>
            1=单通道，2=双通道,speex编码一般为1
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nAudioFormat">
            <summary>
            0=8位,1=16位,一般为2
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.nSamples">
            <summary>
            采集大小,speex 一般为160
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.Data">
            <summary>
            媒体数据
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrame.EncodeName">
            <summary>
            编码器名称
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrameCommandType">
            <summary>
            媒体帧命令类型
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrameCommandType.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrameCommandType.Stop">
            <summary>
            停止 
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrameCommandType.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrameCommandType.Continue">
            <summary>
            继续
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrameCommandType.ResetPos">
            <summary>
            重置播放位置
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrameCommandType.Index">
            <summary>
            音视频索引
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.Cores.Packet.MediaFrameCommandType.Thumbnail">
            <summary>
            缩略图
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Servers.SIPMessage.SipServiceStatus">
            <summary>
            SIP服务状态
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SipServiceStatus.Wait">
            <summary>
            等待
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SipServiceStatus.Complete">
            <summary>
            初始化完成
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore">
            <summary>
            sip消息核心处理
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.UserAgent">
            <summary>
            用户代理
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.LocalEndPoint">
            <summary>
            本地sip终结点
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.RemoteEndPoint">
            <summary>
            远程sip终结点
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.Transport">
            <summary>
            sip传输请求
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.LocalSIPId">
            <summary>
            本地sip编码
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.RemoteSIPId">
            <summary>
            远程sip编码
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.MonitorService">
            <summary>
            监控服务
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.AddMessageRequest(SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPRequest)">
            <summary>
            sip请求消息
            </summary>
            <param name="localSIPEndPoint">本地终结点</param>
            <param name="remoteEndPoint">远程终结点</param>
            <param name="request">sip请求</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.AddMessageResponse(SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPResponse)">
            <summary>
            sip响应消息
            </summary>
            <param name="localSIPEndPoint">本地终结点</param>
            <param name="remoteEndPoint">远程终结点</param>
            <param name="response">sip响应</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.BadRequest(System.String,System.String,System.String)">
            <summary>
            失败的请求
            </summary>
            <param name="msg">错误消息</param>
            <param name="user">设备编码</param>
            <param name="callId">呼叫编号</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.DeviceCatalogQuery">
            <summary>
            设备目录查询
            </summary>
            <param name="deviceId">目的设备编码</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.QueryItems(System.String,System.String,System.Int32,System.String)">
            <summary>
            查询设备目录请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.SetMediaPort">
            <summary>
            设置媒体(rtp/rtcp)端口号
            </summary>
            <returns></returns>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.OnSIPServiceChanged">
            <summary>
            sip服务状态
            </summary>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.OnCatalogReceived">
            <summary>
            设备目录接收
            </summary>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.OnRecordInfoReceived">
            <summary>
            录像文件接收
            </summary>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.SIPMessage.SIPMessageCore.SendRequestTimeout">
            <summary>
            消息发送超时
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore">
            <summary>
            sip监控核心处理
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore._rtpChannel">
            <summary>
            rtp数据通道
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.RealVideoReq">
            <summary>
            实时视频请求
            </summary>
            <param name="deviceId">设备编码</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.AckRequest(SIPSorcery.GB28181.SIP.SIPResponse)">
            <summary>
            确认接收视频请求
            </summary>
            <param name="response">响应消息</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BadRequest(System.String,System.String)">
            <summary>
            失败的请求
            </summary>
            <param name="msg">失败消息内容</param>
            <param name="callId">呼叫编号</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.RealVideoReq(System.String,System.Int32[],System.String,System.Int32,System.String)">
            <summary>
            实时视频请求
            </summary>
            <param name="localIp">本地ip</param>
            <param name="mediaPort">端口号</param>
            <param name="fromTag">from tag</param>
            <param name="cSeq">序号</param>
            <param name="callId">呼叫编号</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.ByeVideoReq">
            <summary>
            结束实时视频请求
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.Stop">
            <summary>
            停止计时器/关闭RTP通道
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.SetMediaReq(System.String,System.Int32[])">
            <summary>
            设置媒体参数请求(实时)
            </summary>
            <param name="localIp">本地ip</param>
            <param name="mediaPort">rtp/rtcp媒体端口(10000/10001)</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.SetSubject">
            <summary>
            设置sip主题
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoReq(System.DateTime,System.DateTime)">
            <summary>
            录像点播视频请求
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoReq(System.String,System.Int32[],System.UInt32,System.UInt32,System.String,System.Int32,System.String)">
            <summary>
            录像点播请求
            </summary>
            <param name="localIp">本地ip</param>
            <param name="mediaPort">端口号</param>
            <param name="startTime">开始时间</param>
            <param name="stopTime">结束时间</param>
            <param name="fromTag">from tag</param>
            <param name="cSeq">序号</param>
            <param name="callId">呼叫编号</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.SetMediaReq(System.String,System.Int32[],System.UInt32,System.UInt32)">
            <summary>
            设置媒体参数请求(回放)
            </summary>
            <param name="localIp">本地ip</param>
            <param name="mediaPort">rtp/rtcp媒体端口(10000/10001)</param>
            <param name="startTime">录像开始时间</param>
            <param name="stopTime">录像结束数据</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoStopPlayingControlReq">
            <summary>
            结束录像点播视频请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoPlaySpeedControlReq(System.String,System.DateTime)">
            <summary>
            控制录像点播播放速度
            </summary>
            <param name="scale">播放速度</param>
            <param name="range">时间范围</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoPlaySpeedControlReq(System.String,System.Int32[],System.String,System.UInt32,System.String,System.Int32,System.String)">
            <summary>
            控制录像点播播放速度
            </summary>
            <param name="localIp">本地ip</param>
            <param name="mediaPort">端口号</param>
            <param name="scale">播放速率</param>
            <param name="Time">时间范围</param>
            <param name="fromTag">from tag</param>
            <param name="cSeq">序号</param>
            <param name="callId">呼叫编号</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.SetMediaReq(System.String,System.Int32[],System.String,System.UInt32)">
            <summary>
            设置媒体参数请求(回放 播放速率)
            </summary>
            <param name="localIp">本地ip</param>
            <param name="mediaPort">rtp/rtcp媒体端口(10000/10001)</param>
            <param name="scale">播放速率</param>
            <param name="Time">时间范围</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoContinuePlayingControlReq">
            <summary>
            恢复录像播放
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoContinuePlayingControlReq(System.String,System.Int32[],System.String,System.Int32,System.String)">
            <summary>
            恢复录像播放
            </summary>
            <param name="localIp">本地ip</param>
            <param name="mediaPort">端口号</param>
            <param name="fromTag">from tag</param>
            <param name="cSeq">序号</param>
            <param name="callId">呼叫编号</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.SetMediaResumeReq">
            <summary>
            设置录像恢复播放包体信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoPauseControlReq">
            <summary>
            暂停录像播放
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.BackVideoPauseControlReq(System.String,System.Int32[],System.String,System.Int32,System.String)">
            <summary>
            暂停录像播放
            </summary>
            <param name="localIp">本地ip</param>
            <param name="mediaPort">端口号</param>
            <param name="fromTag">from tag</param>
            <param name="cSeq">序号</param>
            <param name="callId">呼叫编号</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.SetMediaPauseReq">
            <summary>
            设置录像暂停包体信息
            </summary>
            <returns></returns>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.OnSIPServiceChanged">
            <summary>
            sip服务状态
            </summary>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.SIPMonitor.SIPMonitorCore.OnStreamReady">
            <summary>
            视频流回调
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPRegistrarBindingsManager.UpdateBindings(SIPSorcery.GB28181.SIP.App.SIPAccount,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,System.Collections.Generic.List{SIPSorcery.GB28181.SIP.SIPContactHeader},System.String,System.Int32,System.Int32,System.String,SIPSorcery.GB28181.SIP.SIPResponseStatusCodesEnum@,System.String@)">
            <summary>
            Updates the bindings list for a registrar's address-of-records.
            </summary>
            <param name="proxyEndPoint">If the request arrived at this registrar via a proxy then this will contain the end point of the proxy.</param>
            <param name="uacRecvdEndPoint">The public end point the UAC REGISTER request was deemded to have originated from.</param>
            <param name="registrarEndPoint">The registrar end point the registration request was received on.</param>
            <param name="maxAllowedExpiry">The maximum allowed expiry that can be granted to this binding request.</param>
            <returns>If the binding update was successful the expiry time for it is returned otherwise 0.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.Servers.RegistrarCore">
            <summary>
            The registrar core is the class that actually does the work of receiving registration requests and populating and
            maintaining the SIP registrations list.
            
            From RFC 3261 Chapter "10.2 Constructing the REGISTER Request"
            - Request-URI: The Request-URI names the domain of the location service for which the registration is meant.
            - The To header field contains the address of record whose registration is to be created, queried, or modified.  
              The To header field and the Request-URI field typically differ, as the former contains a user name. 
            
            [ed Therefore:
            - The Request-URI inidcates the domain for the registration and should match the domain in the To address of record.
            - The To address of record contians the username of the user that is attempting to authenticate the request.]
            
            Method of operation:
             - New SIP messages received by the SIP Transport layer and queued before being sent to RegistrarCode for processing. For requests
               or response that match an existing REGISTER transaction the SIP Transport layer will handle the retransmit or drop the request if
               it's already being processed.
             - Any non-REGISTER requests received by the RegistrarCore are responded to with not supported,
             - If a persistence is being used to store registered contacts there will generally be a number of threads running for the
               persistence class. Of those threads there will be one that runs calling the SIPRegistrations.IdentifyDirtyContacts. This call identifies
               expired contacts and initiates the sending of any keep alive and OPTIONs requests.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.RegistrarCore.GetContactHeader(System.Collections.Generic.List{SIPSorcery.GB28181.SIP.App.SIPRegistrarBinding})">
            <summary>
            Gets a SIP contact header for this address-of-record based on the bindings list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.SIPUserAgentConfigurationManager.GetUserAgentConfig(System.String)">
            <summary>
            Makes a decision on what the maximum allowed expiry is for a REGISTER request. Allows different expiry values to be accepted from different user agents.
            This is useful as some user agents ignore the expiry value set by the server and setting a higher value for that user agent can stop the registrar
            expiring it.
            </summary>
            <param name="userAgent">The useragent to get the maximum expiry for.</param>
            <returns>The maximum expiry value that will be accepted.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.Servers.TaskTiming">
            <summary>
            计时器任务
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.TaskTiming.#ctor(SIPSorcery.GB28181.SIP.SIPRequest,SIPSorcery.GB28181.SIP.SIPTransport)">
            <summary>
            计时器初始化
            </summary>
            <param name="request">sip响应</param>
            <param name="trans">sip传输</param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.TaskTiming.Start">
            <summary>
            启动计时器
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.TaskTiming.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.TaskTiming.timeSend_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            间隔一定时间触发
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.Servers.TaskTiming.MessageSendRequestTimeout(SIPSorcery.GB28181.SIP.SIPResponse)">
            <summary>
            消息发送请求超时回调
            </summary>
            <param name="response">sip响应</param>
        </member>
        <member name="E:SIPSorcery.GB28181.Servers.TaskTiming.OnCloseRTPChannel">
            <summary>
            超时关闭RTP通道
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.ISIPMonitorPublisher.Subscribe(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String@)">
            <summary>
            This method subscribes a client to the monitor event publisher so that server monitor events can be provided to the client.
            </summary>
            <param name="customerUsername">The username of the customer subscribing for monitor events.</param>
            <param name="adminId">The admin ID of the customer subscribing for monitor events.</param>
            <param name="address">The address identifier of the connection that events are being subscribed for over. A single 
            address can have multiple sessions and it maps 1-to-1 with the physical connection.</param>
            <param name="sessionID">The session ID for this subscription.</param>
            <param name="subject">The type of filter being set. Can be one of ControlClient or Machine.</param>
            <param name="filter">The user provided filter for the monitor events. The filter tells the monitor event publisher what events
            this session is interested in.</param>
            <param name="expiry">The duration in seconds that the subscription is being requested for.</param>
            <param name="udpSocket">If set indicates a UDP socket that event notifications should be pushed to. If null the events will
            be queued awating a pull request.</param>
            <param name="subscribeError">If the subscribe attempt fails this parameter will hold an error message.</param>
            <returns>If the subscription request is successful reflects the session ID for the subscription request, each matching monitor 
            event will have a session ID set. If the subscription request fails null is returned.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.ISIPMonitorPublisher.ExtendSession(System.String,System.String,System.Int32)">
            <summary>
            Attempts to extend an existing notifications session.
            </summary>
            <param name="address">The address ID of the session.</param>
            <param name="sessionID">The session ID of the session.</param>
            <param name="expiry">The time in seconds to request the session be extended by.</param>
            <returns>If the session extension is successful null is returned, if it fails an error message is returned.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPMonitorConsoleEvent">
            <summary>
            Describes the types of events that can be sent by the different SIP Servers to SIP
            Monitor clients.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPMonitorEvent">
            <summary>
            Describes the types of events that can be sent by the different SIP Servers to SIP
            Monitor clients.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPMonitorFilter.ShowSIPMonitorEvent(SIPSorcery.GB28181.SIP.App.SIPMonitorEvent)">
            <summary>
            Rules for displaying events.
             1. The event type is checked to see if it matches. If no event type has been specified than all events EXCEPT FullSIPTrace are
                matched,
             2. If the event type is FullSIPTrace then the messages can be filtered on the request type. If the request type is not set all
                SIP trace messages are matched otherwise only those pertaining to the request type specified,
             3. The server type is checked, if it's not set all events are matched,
             4. If the event has matched up until this point a decision is now made as to whether to display or reject it:
                a. If the IPAddress filter is set is checked, if it matches the event is displayed otherwise it's rejected,
                b. If the username AND server IP AND request type AND regex filters all match the vent is displayed otherwise rejected. 
            </summary>
            <param name="proxyEvent"></param>
            <returns></returns>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPMonitorMachineEvent">
            <summary>
            Describes monitoring events that are for machine notifications to initiate actions such as
            updating a user interface. The events will not typically contain useful information for a human
            viewer.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.PolicyConnection">
            <summary>
             Encapsulate and manage state for a single connection from a client 
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPAccount">
            <remarks>
            SIP account usernames can be treated by some SIP Sorcery server agents as domain name like structures where a username of
            "x.username" will match the "username" account for receiving calls. To facilitate this SIP accounts with a '.' character in them
            can only be created where the suffix "username" portion matches the Owner field. This allows users to create SIP accounts with '.'
            in them but will prevent a different user from being able to hijack an "x.username" account and caue unexpected behaviour.
            </remarks>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPDomain">
            <remarks>
            The mechanism to load the SIP domain records differs for XML and SQL data stores. Because the domain and domain alias
            are hierarchical the XML stores the records in a nested node structure. With SQL the nested structure is not possible 
            and instead a flat table is used where the domain alias are stored as a delimited list in a single column field.
            </remarks>
        </member>
        <member name="P:SIPSorcery.GB28181.SIP.App.SIPProvider.Registrar">
            <summary>
            Normally the registrar server will just be the main Provider server however in some cases they will be different.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPRegistrarBinding">
            <summary>
            The SIPAddressBinding represents a single registered contact uri for a user. A user can have multiple registered contact uri's.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPRegistrarBinding.#ctor(SIPSorcery.GB28181.SIP.App.SIPAccount,SIPSorcery.GB28181.SIP.SIPURI,System.String,System.Int32,System.String,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,System.Int32)">
            <summary></summary>
            <param name="uacRecvdEndPoint">If this is non-null it indicates the contact header should be mangled based on the public socket the register request was demmed
            to have originated from rather then relying on the contact value recieved from the uac.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPRegistrarBinding.RefreshBinding(System.Int32,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,System.Boolean)">
            <summary>
            Refreshes a binding when the remote network information of the remote or proxy end point has changed.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPDNSManager">
            <summary>
            
            </summary>
            <remarks>
            1. If transport parameter is specified it takes precedence,
            2. If no transport parameter and target is an IP address then sip should use udp and sips tcp,
            3. If no transport parameter and target is a host name with an explicit port then sip should use 
               udp and sips tcp and host should be resolved using an A or AAAA record DNS lookup (section 4.2),
            4. If no transport protocol and no explicit port and target is a host name then the client should no
               an NAPTR lookup and utilise records for services SIP+D2U, SIP+D2T, SIP+D2S, SIPS+D2T and SIPS+D2S,
            5. If NAPTR record(s) are found select the desired transport and lookup the SRV record,
            6. If no NAPT records are found lookup SRV record for desired protocol _sip._udp, _sip._tcp, _sips._tcp,
               _sip._tls,
            7. If no SRV records found lookup A or AAAA record.
            
            Observations from the field.
            - A DNS server has been observed to not respond at all to NAPTR or SRV record queries meaning lookups for
              them will permanently time out.
            </remarks>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPPresenceEventSubscription.AddMonitorEvent(SIPSorcery.GB28181.SIP.App.SIPMonitorMachineEvent)">
            <summary>
            Checks and where required adds a presence related monitor event to the list of pending notifications.
            </summary>
            <param name="machineEvent">The monitor event that has been received.</param>
            <returns>True if a notification needs to be sent as a result of this monitor event, false otherwise.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPPacketMangler.MangleSIPRequest(SIPSorcery.GB28181.SIP.App.SIPMonitorServerTypesEnum,SIPSorcery.GB28181.SIP.SIPRequest,System.String,SIPSorcery.GB28181.SIP.App.SIPMonitorLogDelegate)">
            <summary>
            Mangles private IP addresses in a SIP request replacing them with the IP address the packet was received on. 
            </summary>
            <param name="sipResponse">The unmangled SIP request.</param>
            <returns>The mangled SIP request</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPPacketMangler.MangleSIPResponse(SIPSorcery.GB28181.SIP.App.SIPMonitorServerTypesEnum,SIPSorcery.GB28181.SIP.SIPResponse,SIPSorcery.GB28181.SIP.SIPEndPoint,System.String,SIPSorcery.GB28181.SIP.App.SIPMonitorLogDelegate)">
            <summary>
            Mangles private IP addresses in a SIP response replacing them with the IP address the packet was received on. 
            </summary>
            <param name="sipResponse">The unmangled SIP response.</param>
            <returns>The mangled SIP response</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPRequestAuthenticator.AuthenticateSIPRequest(SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPRequest,SIPSorcery.GB28181.SIP.App.SIPAccount,SIPSorcery.GB28181.SIP.App.SIPMonitorLogDelegate)">
            <summary>
            Authenticates a SIP request.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPB2BUserAgent">
            <summary>
            This class represents a back-to-back (B2B) user agent (UA) that is used to attach an outgoing
            call (UAC) to an incoming (UAS) call. Normally the UAC call would be the client side of a call that
            is placed to an external UAS in this case it's the client side of a call to a UAS in the same process.
            The use for this class is to allow an outgoing call from a SIP Account to another SIP Account's incoming
            dial plan.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPCallDescriptor.#ctor(SIPSorcery.GB28181.SIP.App.SIPAccount,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="toSIPAccount"></param>
            <param name="uri">The uri can be different to the to SIP account if a dotted notation is used. For
            example 1234.user@sipsorcery.com.</param>
            <param name="fromHeader"></param>
            <param name="contentType"></param>
            <param name="content"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPCallDescriptor.SetGeneralFromHeaderFields(System.String,System.String,System.String)">
            <summary>
            These setting do NOT override the ones from the call options.
            </summary>
            <param name="fromDisplayName"></param>
            <param name="fromUsername"></param>
            <param name="fromhost"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPNonInviteClientUserAgent.AuthResponseReceived(SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPTransaction,SIPSorcery.GB28181.SIP.SIPResponse)">
            <summary>
            The event handler for responses to the authenticated register request.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPNotifierClient`1">
            <summary>
            This class represent a client for a SIP notifier server. The client can subscribe to notifications from the
            server as outlined in RFC3265. The generic parameter is used to set the type of notification the client will
            generate. Different SIP event packages have different ways of representing their data. For example RFC4235
            uses XML to convey dialog notifications, RFC3842 uses plain text to convery message waiting indications.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPNotifierClient`1.Resubscribe">
            <summary>
            If the client is waiting for the timeout until the next subscribe is due calling this method will result
            in an immediate attempt to re-subscribe. When a subscribe request is received the notification server should
            send a full state notification so this method is useful to refresh client state.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPNotifierClient`1.Subscribe(SIPSorcery.GB28181.SIP.SIPURI,System.Int32,SIPSorcery.GB28181.SIP.SIPEventPackage,System.String,SIPSorcery.GB28181.SIP.SIPURI)">
            <summary>
            Initiates a SUBSCRIBE request to a notification server.
            </summary>
            <param name="subscribeToURI">The SIP user that dialog notifications are being subscribed to.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPRegistrationUserAgent.ServerResponseReceived(SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPTransaction,SIPSorcery.GB28181.SIP.SIPResponse)">
            <summary>
            The event handler for responses to the initial register request.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPRegistrationUserAgent.AuthResponseReceived(SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPTransaction,SIPSorcery.GB28181.SIP.SIPResponse)">
            <summary>
            The event handler for responses to the authenticated register request.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPServerUserAgent">
            <remarks>
            A To tag MUST be set on all non 100 Trying responses, see RFC 3261 "8.2.6.2 Headers and Tags".
            </remarks>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.App.SIPTransferServerUserAgent">
            <summary>
            A server user agent that replaces an existing sip dialogue rather than creating a new dialogue with
            a client user agent.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPTransferServerUserAgent.Answer(System.String,System.String,System.String,SIPSorcery.GB28181.SIP.SIPDialogue,SIPSorcery.GB28181.SIP.SIPDialogueTransferModesEnum)">
            <summary>
            An answer on a blind transfer means the remote end of the dialogue being replaced should be re-invited and then the replaced dialogue 
            should be hungup.
            </summary>
            <param name="contentType"></param>
            <param name="body"></param>
            <param name="toTag"></param>
            <param name="answeredDialogue"></param>
            <param name="transferMode"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.App.SIPTransferServerUserAgent.PendingLegHungup">
            <summary>
            Fired when a transfer is pending and the call leg that is going to be bridged hangs up before the transfer completes.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPServicesEnum">
            <summary>
            A list of the different combinations of SIP schemes and transports. 
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPDNSLookupResult.#ctor(SIPSorcery.GB28181.SIP.SIPURI,SIPSorcery.GB28181.SIP.SIPEndPoint)">
            <summary>
            Used when the result is already known such as when the lookup is for an IP address but a DNS lookup
            object still needs to be returned.
            </summary>
            <param name="uri">The URI being looked up.</param>
            <param name="resultEndPoint">The known result SIP end point.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.HTTPDigest.DigestCalcHA1(System.String,System.String,System.String)">
            <summary>
            Calculate H(A1) as per HTTP Digest specification.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.HTTPDigest.DigestCalcHA2(System.String,System.String)">
            <summary>
            Calculate H(A2) as per HTTP Digest specification.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPCDR">
            <summary>
            Call detail record for a SIP call.
            </summary>
        </member>
        <!-- 对于成员“T:SIPSorcery.GB28181.SIP.SIPEventDialogInfo”忽略有格式错误的 XML 注释 -->
        <member name="M:SIPSorcery.GB28181.SIP.SIPEventDialogParticipant.ToXML(System.String)">
            <summary>
            Puts the dialog participant information to an XML element.
            </summary>
            <param name="nodeName">A participant can represent a local or remote party, the node name needs to be set to either "local" or "remote".</param>
            <returns>An XML element representing the dialog participant.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPEventPresence">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPTransaction">
             <note>
             A response matches a client transaction under two conditions:
            
             1.  If the response has the same value of the branch parameter in
             the top Via header field as the branch parameter in the top
             Via header field of the request that created the transaction.
            
             2.  If the method parameter in the CSeq header field matches the
             method of the request that created the transaction.  The
             method is needed since a CANCEL request constitutes a
             different transaction, but shares the same value of the branch
             parameter.
             
             [RFC 3261 17.2.3 page 137]
             A request matches a transaction:
            
             1. the branch parameter in the request is equal to the one in the
                 top Via header field of the request that created the
                 transaction, and
            
              2. the sent-by value in the top Via of the request is equal to the
                 one in the request that created the transaction, and
            
              3. the method of the request matches the one that created the
                 transaction, except for ACK, where the method of the request
                 that created the transaction is INVITE.
             
             [RFC 3261 12 Dialogs] (Note: I've gotten a bit mixed up between dialogs and
             transactions here, AC).
             A dialog ID is also associated with all responses and with any
             request that contains a tag in the To field.  The rules for computing
             the dialog ID of a message depend on whether the SIP element is a UAC
             or UAS.  For a UAC, the Call-ID value of the dialog ID is set to the
             Call-ID of the message, the remote tag is set to the tag in the To
             field of the message, and the local tag is set to the tag in the From
             field of the message (these rules apply to both requests and
             responses).  As one would expect for a UAS, the Call-ID value of the
             dialog ID is set to the Call-ID of the message, the remote tag is set
             to the tag in the From field of the message, and the local tag is set
             to the tag in the To field of the message.
             
             Notes (Not too sure on matching requests to transactions AC 09 Feb 2008):
             - Matching a response to a transaction can rely on the branchid in the Via header.
             - Matching a request to a transaction can rely on the branchid EXCEPT for an
               ACK for a 2xx final response which is a new transaction and has a new branch ID.
             </note>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransaction.#ctor(SIPSorcery.GB28181.SIP.SIPTransport,SIPSorcery.GB28181.SIP.SIPRequest,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint)">
            <summary>
            Creates a new SIP transaction and adds it to the list of in progress transactions.
            </summary>
            <param name="sipTransport">The SIP Transport layer that is to be used with the transaction.</param>
            <param name="transactionRequest">The SIP Request on which the transaction is based.</param>
            <param name="dstEndPoint">The socket the at the remote end of the transaction and which transaction messages will be sent to.</param>
            <param name="localSIPEndPoint">The socket that should be used as the send from socket for communications on this transaction. Typically this will
            be the socket the initial request was received on.</param>
        </member>
        <!-- 对于成员“M:SIPSorcery.GB28181.SIP.SIPTransactionEngine.GetTransaction(SIPSorcery.GB28181.SIP.SIPRequest)”忽略有格式错误的 XML 注释 -->
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransactionEngine.RemoveTransaction(System.String)">
            <summary>
            Should not normally be used as transactions will time out after the retransmit window has expired. This method is 
            used in such cases where the original request is being dropped and no action is required on a re-transmit.
            </summary>
            <param name="transactionId"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransactionEngine.IsCallIdUniqueForPending(System.String)">
            <summary>
             Checks whether there is only a single transaction outstanding for a Call-ID header. This is used in an experimental trial of matching
             ACK's on the Call-ID if the full check fails.
            </summary>
            <param name="callId">The SIP Header Call-ID to check for.</param>
            <returns>True if there is only a single pending transaction with the specified  Call-ID, false otherwise.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.UACInviteTransaction">
            <summary>
            SIP transaction that initiates a call to a SIP User Agent Server. This transaction processes outgoing calls SENT by the application.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.UACInviteTransaction.#ctor(SIPSorcery.GB28181.SIP.SIPTransport,SIPSorcery.GB28181.SIP.SIPRequest,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,System.Boolean)">
            <param name="sendOkAckManually">If set an ACK request for the 2xx response will NOT be sent and it will be up to the application to explicitly call the SendACK request.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.UACInviteTransaction.GetNewTransactionACKRequest(SIPSorcery.GB28181.SIP.SIPResponse,SIPSorcery.GB28181.SIP.SIPURI,SIPSorcery.GB28181.SIP.SIPEndPoint)">
             <summary>
             New transaction ACK requests are for 2xx responses, i.e. INVITE accepted and dialogue being created.
             </summary>
             <remarks>
             From RFC 3261 Chapter 17.1.1.3 - ACK for non-2xx final responses
             
             IMPORTANT:
             an ACK for a non-2xx response will also have the same branch ID as the INVITE whose response it acknowledges.
             
             The ACK request constructed by the client transaction MUST contain
             values for the Call-ID, From, and Request-URI that are equal to the
             values of those header fields in the request passed to the transport
             by the client transaction (call this the "original request").  The To
             header field in the ACK MUST equal the To header field in the
             response being acknowledged, and therefore will usually differ from
             the To header field in the original request by the addition of the
             tag parameter.  The ACK MUST contain a single Via header field, and
             this MUST be equal to the top Via header field of the original
             request.  The CSeq header field in the ACK MUST contain the same
             value for the sequence number as was present in the original request,
             but the method parameter MUST be equal to "ACK".
            
             If the INVITE request whose response is being acknowledged had Route
             header fields, those header fields MUST appear in the ACK.  This is
             to ensure that the ACK can be routed properly through any downstream
             stateless proxies.
             
             From RFC 3261 Chapter 13.2.2.4 - ACK for 2xx final responses
             
             IMPORTANT:
             an ACK for a 2xx final response is a new transaction and has a new branch ID.
             
             The UAC core MUST generate an ACK request for each 2xx received from
             the transaction layer.  The header fields of the ACK are constructed
             in the same way as for any request sent within a dialog (see Section
             12) with the exception of the CSeq and the header fields related to
             authentication.  The sequence number of the CSeq header field MUST be
             the same as the INVITE being acknowledged, but the CSeq method MUST
             be ACK.  The ACK MUST contain the same credentials as the INVITE.  If
             the 2xx contains an offer (based on the rules above), the ACK MUST
             carry an answer in its body.  If the offer in the 2xx response is not
             acceptable, the UAC core MUST generate a valid answer in the ACK and
             then send a BYE immediately.
             </remarks>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.UACInviteTransaction.GetInTransactionACKRequest(SIPSorcery.GB28181.SIP.SIPResponse,SIPSorcery.GB28181.SIP.SIPURI,SIPSorcery.GB28181.SIP.SIPEndPoint)">
            <summary>
            In transaction ACK requests are for non-2xx responses, i.e. INVITE rejected and no dialogue being created.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.UASInviteTransaction">
            <summary>
            The server transaction for an INVITE request. This transaction processes incoming calls RECEIVED by the application.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPChannel.PruneConnections(System.String)">
            <summary>
            Periodically checks the established connections and closes any that have not had a transmission for a specified 
            period or where the number of connections allowed per IP address has been exceeded. Only relevant for connection
            oriented channels such as TCP and TLS.
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.SIP.SIPChannel.SIPChannelContactURI">
            <summary>
            This is the URI to be used for contacting this SIP channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPConnection.SocketReadCompleted(System.Int32)">
            <summary>
            Processes the receive buffer after a read from the connected socket.
            </summary>
            <param name="bytesRead">The number of bytes that were read into the receive buffer.</param>
            <returns>True if the receive was processed correctly, false if the socket returned 0 bytes or was disconnected.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPConnection.ProcessReceive(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Processes a buffer from a TCP read operation to extract the first full SIP message. If no full SIP 
            messages are available it returns null which indicates the next read should be appended to the current
            buffer and the process re-attempted.
            </summary>
            <param name="receiveBuffer">The buffer to check for the SIP message in.</param>
            <param name="start">The position in the buffer to start parsing for a SIP message.</param>
            <param name="length">The position in the buffer that indicates the end of the received bytes.</param>
            <returns>A byte array holding a full SIP message or if no full SIP messages are avialble null.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPConnection.GetContentLength(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Attempts to find the Content-Length header is a SIP header and extract it.
            </summary>
            <param name="buffer">The buffer to search in.</param>
            <param name="start">The position in the buffer to start the search from.</param>
            <param name="end">The position in the buffer to stop the search at.</param>
            <returns></returns>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.AuthHeaders">
            <summary>
            Authorization Headers
            </summary>
        </member>
        <!-- 对于成员“T:SIPSorcery.GB28181.SIP.SIPEscape”忽略有格式错误的 XML 注释 -->
        <member name="T:SIPSorcery.GB28181.SIP.SIPDialogue">
            <summary>
            See "Chapter 12 Dialogs" in RFC3261.
            </summary>
            <remarks>
            The standard states that there are two independent CSeq's for a dialogue: one for requests from the UAC and for requests
            from the UAS. In practice it's been noted that is a UAS (initial UAS) sends an in-dialogue request with a CSeq less than the
            UAC's CSeq it can cause problems. To avoid this issue when generating requests the remote CSeq is always used.
            </remarks>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPDialogue.#ctor(SIPSorcery.GB28181.SIP.UASInviteTransaction,System.String,System.String)">
            <summary>
            This constructor is used by server user agents or SIP elements acting in a server user agent role. When
            acting as a server user agent the local fields are contained in the To header and the remote fields are 
            in the From header.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPDialogue.#ctor(SIPSorcery.GB28181.SIP.UACInviteTransaction,System.String,System.String)">
            <summary>
            This constructor is used by client user agents or SIP elements acting in a client user agent role. When
            acting as a client user agent the local fields are contained in the From header and the remote fields are 
            in the To header.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPDialogue.#ctor(SIPSorcery.GB28181.SIP.SIPRequest,System.String,System.String,System.String)">
            <summary>
            This constructor is used to create non-INVITE dialogues for example the dialogues used in SIP event interactions
            where the dialogue is created based on a SUBSCRIBE request.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPEndPoint">
            <summary>
            This class must remain immutable otherwise the SIP stack can develop problems. SIP end points can get
            passed amongst different servers for logging and forwarding SIP messages and a modification of the end point
            by one server can result in a problem for a different server. Instead a new SIP end point should be created
            wherever a modification is required.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPEndPoint.ParseSerialisedSIPEndPoint(System.String)">
            <summary>
            Reverses ToString().
            </summary>
            <param name="serialisedSIPEndPoint">The serialised SIP end point MUST be in the form protocol:socket and protocol must
            be exactly 3 characters. Valid examples are udp:10.0.0.1:5060, invalid example is 10.0.0.1:5060.</param>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPViaHeader">
             <bnf>
             Via               =  ( "Via" / "v" ) HCOLON via-parm *(COMMA via-parm)
             via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )
             via-params        =  via-ttl / via-maddr / via-received / via-branch / via-extension
             via-ttl           =  "ttl" EQUAL ttl
             via-maddr         =  "maddr" EQUAL host
             via-received      =  "received" EQUAL (IPv4address / IPv6address)
             via-branch        =  "branch" EQUAL token
             via-extension     =  generic-param
             sent-protocol     =  protocol-name SLASH protocol-version SLASH transport
             protocol-name     =  "SIP" / token
             protocol-version  =  token
             transport         =  "UDP" / "TCP" / "TLS" / "SCTP" / other-transport
             sent-by           =  host [ COLON port ]
             ttl               =  1*3DIGIT ; 0 to 255
             generic-param     =  token [ EQUAL gen-value ]
             gen-value         =  token / host / quoted-string
             </bnf>
             <remarks>
             The Via header only has parameters, no headers. Parameters of from ...;name=value;name2=value2
             Specific parameters: ttl, maddr, received, branch.
             
             From page 179 of RFC3261:
             "Even though this specification mandates that the branch parameter be
             present in all requests, the BNF for the header field indicates that
             it is optional."
             
             The branch parameter on a Via therefore appears to be optionally mandatory?!
            
             Any SIP application element that uses transactions depends on the branch parameter for transaction matching.
             Only the top Via header branch is used for transactions though so if the request has made it to this stack
             with missing branches then in theory it should be safe to proceed. It will be left up to the SIPTransaction
             class to reject any SIP requests that are missing the necessary branch.
             </remarks>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPFromHeader">
            <bnf>
            From            =  ( "From" / "f" ) HCOLON from-spec
            from-spec       =  ( name-addr / addr-spec ) *( SEMI from-param )
            from-param      =  tag-param / generic-param
            name-addr		=  [ display-name ] LAQUOT addr-spec RAQUOT
            addr-spec		=  SIP-URI / SIPS-URI / absoluteURI
            tag-param       =  "tag" EQUAL token
            generic-param   =  token [ EQUAL gen-value ]
            gen-value       =  token / host / quoted-string
            </bnf>
            <remarks>
            The From header only has parameters, no headers. Parameters of from ...;name=value;name2=value2.
            Specific parameters: tag.
            </remarks>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPToHeader">
            <bnf>
            To				=  ( "To" / "t" ) HCOLON ( name-addr / addr-spec ) *( SEMI to-param )
            to-param		=  tag-param / generic-param
            name-addr		=  [ display-name ] LAQUOT addr-spec RAQUOT
            addr-spec		=  SIP-URI / SIPS-URI / absoluteURI
            tag-param       =  "tag" EQUAL token
            generic-param   =  token [ EQUAL gen-value ]
            gen-value       =  token / host / quoted-string
            </bnf>
            <remarks>
            The To header only has parameters, no headers. Parameters of from ...;name=value;name2=value2.
            Specific parameters: tag.
            </remarks>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPContactHeader">
             <bnf>
             Contact        =  ("Contact" / "m" ) HCOLON ( STAR / (contact-param *(COMMA contact-param)))
             contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)
             name-addr      =  [ display-name ] LAQUOT addr-spec RAQUOT
             addr-spec      =  SIP-URI / SIPS-URI / absoluteURI
             display-name   =  *(token LWS)/ quoted-string
            
             contact-params     =  c-p-q / c-p-expires / contact-extension
             c-p-q              =  "q" EQUAL qvalue
             c-p-expires        =  "expires" EQUAL delta-seconds
             contact-extension  =  generic-param
             delta-seconds      =  1*DIGIT
             generic-param  =  token [ EQUAL gen-value ]
             gen-value      =  token / host / quoted-string
             </bnf>
             <remarks>
             The Contact header only has parameters, no headers. Parameters of from ...;name=value;name2=value2
             Specific parameters: q, expires.
             </remarks>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPContactHeader.AreEqual(SIPSorcery.GB28181.SIP.SIPContactHeader,SIPSorcery.GB28181.SIP.SIPContactHeader)">
            <summary>
            Compares two contact headers to determine contact address equality.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPRoute">
             <summary>
             The SIPRoute class is used to represent both Route and Record-Route headers.
             </summary>
             <bnf>
             Route               =  "Route" HCOLON route-param *(COMMA route-param)
             route-param         =  name-addr *( SEMI rr-param )
             
             Record-Route        =  "Record-Route" HCOLON rec-route *(COMMA rec-route)
             rec-route           =  name-addr *( SEMI rr-param )
             rr-param            =  generic-param
            
             name-addr           =  [ display-name ] LAQUOT addr-spec RAQUOT
             addr-spec           =  SIP-URI / SIPS-URI / absoluteURI
             display-name        =  *(token LWS)/ quoted-string
             generic-param       =  token [ EQUAL gen-value ]
             gen-value           =  token / host / quoted-string
             </bnf>
             <remarks>
             The Route and Record-Route headers only have parameters, no headers. Parameters of from ...;name=value;name2=value2
             There are no specific parameters.
             </remarks>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPRouteSet.ReplaceRoute(System.String,System.String)">
            <summary>
            If a route set is travelling from the public side of a proxy to the private side it can be required that the Record-Route set is modified.
            </summary>
            <param name="origSocket">The socket string in the original route set that needs to be replace.</param>
            <param name="replacementSocket">The socket string the original route is being replaced with.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPViaSet.PopTopViaHeader">
            <summary>
            Pops top Via header off the array.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPViaSet.UpateTopViaHeader(System.Net.IPEndPoint)">
            <summary>
            Updates the topmost Via header by setting the received and rport parameters to the IP address and port
            the request came from.
            </summary>
            <remarks>The setting of the received parameter is documented in RFC3261 section 18.2.1 and in RFC3581
            section 4. RFC3581 states that the received parameter value must be set even if it's the same as the 
            address in the sent from field. The setting of the rport parameter is documented in RFC3581 section 4.
            An attempt was made to comply with the RFC3581 standard and only set the rport parameter if it was included
            by the client user agent however in the wild there are too many user agents that are behind symmetric NATs 
            not setting an empty rport and if it's not added then they will not be able to communicate.
            </remarks>
            <param name="msgRcvdEndPoint">The remote endpoint the request was received from.</param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPViaSet.PushViaHeader(SIPSorcery.GB28181.SIP.SIPViaHeader)">
            <summary>
            Pushes a new Via header onto the top of the array.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPHeader">
            <bnf>
            header  =  "header-name" HCOLON header-value *(COMMA header-value)
            field-name: field-value CRLF
            </bnf>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPHeader.ToString">
            <summary>
            Puts the SIP headers together into a string ready for transmission.
            </summary>
            <returns>String representing the SIP headers.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPMessage">
            <bnf>
            generic-message  =  start-line
                                *message-header
                                CRLF
                                [ message-body ]
            start-line       =  Request-Line / Status-Line
            </bnf>
        </member>
        <!-- 对于成员“T:SIPSorcery.GB28181.SIP.SIPParameters”忽略有格式错误的 XML 注释 -->
        <member name="M:SIPSorcery.GB28181.SIP.SIPParameters.#ctor(System.String,System.Char)">
            <summary>
            Parses the name value pairs from a SIP parameter or header string.
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPRequest">
            <bnf>
             Method SP Request-URI SP SIP-Version CRLF
             *message-header
             CRLF
             [ message-body ]
             
             Methods: REGISTER, INVITE, ACK, CANCEL, BYE, OPTIONS
             SIP-Version: SIP/2.0
             
             SIP-Version    =  "SIP" "/" 1*DIGIT "." 1*DIGIT
            </bnf>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPRequest.Copy">
            <summary>
            Creates an identical copy of the SIP Request for the caller.
            </summary>
            <returns>New copy of the SIPRequest.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPRequest.IsLoop(System.String,System.Int32,System.String)">
            <summary>
            Determines if this SIP header is a looped header. The basis for the decision is the branchid in the Via header. If the branchid for a new
            header computes to the same branchid as a Via header already in the SIP header then it is considered a loop.
            </summary>
            <returns>True if this header is a loop otherwise false.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPResponse">
            <bnf>
            SIP-Version SP Status-Code SP Reason-Phrase CRLF
            *message-header
            CRLF
            [ message-body ]
            </bnf>
            <summary>
             Status Codes:	
             1xx: Provisional -- request received, continuing to process the request;
             2xx: Success -- the action was successfully received, understood, and accepted;
             3xx: Redirection -- further action needs to be taken in order to complete the request;
             4xx: Client Error -- the request contains bad syntax or cannot be fulfilled at this server;
             5xx: Server Error -- the server failed to fulfill an apparently valid request;
             6xx: Global Failure -- the request cannot be fulfilled at any server.
             
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPResponse.Copy">
            <summary>
            Creates an identical copy of the SIP Response for the caller.
            </summary>
            <returns>New copy of the SIPResponse.</returns>
        </member>
        <member name="T:SIPSorcery.GB28181.SIP.SIPTransport">
            <summary>
            Record number of each type of request received.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.AddSIPChannel(System.Collections.Generic.List{SIPSorcery.GB28181.SIP.SIPChannel})">
            <summary>
            Adds additional SIP Channels to the transport layer.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.AddSIPChannel(SIPSorcery.GB28181.SIP.SIPChannel)">
            <summary>
            Adds an additional SIP Channel to the transport layer.
            </summary>
            <param name="localEndPoint"></param>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.PreProcessRouteInfo(SIPSorcery.GB28181.SIP.SIPRequest)">
            <summary>
            This function performs processing on a request to handle any actions that need to be taken based on the Route header.
            </summary>
            <remarks>
            The main sections in the RFC3261 dealing with Route header processing are sections 12.2.1.1 for request processing and
            16.4 for proxy processing.
            The steps to process requests for Route headers are:
             1. If route set is empty no further action is required, forward to destination resolved from request URI,
             2. If the request URI is identified as a value that was previously set as a Route by this SIP agent it means the
                previous hop was a strict router. Replace the reqest URI with the last Route header and go to next step,
             3. If the top most route header was set by this SIP agent then remove it and go to next step,
             4. If the top most route set does contain the lr parameter then forward to the destination resolved by it,
             5. If the top most route header does NOT contain the lr parameter is must be popped and inserted as the request URI
                and the original request URI must be added to the end of the route set, forward to destination resolved from request URI,
            </remarks>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.SendRaw(SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,System.Byte[])">
            <summary>
            Allows raw bytes to be sent from one of the SIPTransport sockets. This should not be used for SIP payloads and instead is
            provided to allow other types of payloads to be multi-plexed on the SIP socket. Examples are sending NAT keep alives and
            STUN responses where it's useful to use the same socket as the SIP packets.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.SendSIPReliable(SIPSorcery.GB28181.SIP.SIPTransaction)">
            <summary>
            Sends a SIP request/response and keeps track of whether a response/acknowledgement has been received. If no response is received then periodic retransmits are made
            for up to T1 x 64 seconds.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.FindSIPChannel(SIPSorcery.GB28181.SIP.SIPEndPoint)">
            <summary>
            Attempts to match a SIPChannel for this process that has the specified local end point and protocol.
            </summary>
            <param name="localEndPoint">The local socket endpoint of the SIPChannel to find.</param>
            <returns>A matching SIPChannel if found otherwise null.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.GetDefaultChannel(SIPSorcery.GB28181.SIP.SIPProtocolsEnum)">
            <summary>
            Returns the first SIPChannel found for the requested protocol.
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.GetResponse(SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPEndPoint,SIPSorcery.GB28181.SIP.SIPResponseStatusCodesEnum,System.String)">
            <summary>
            Used to create a SIP response when it was not possible to parse the incoming SIP request.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPTransport.GetRequestEndPoint(SIPSorcery.GB28181.SIP.SIPRequest,SIPSorcery.GB28181.SIP.SIPEndPoint,System.Boolean)">
            <summary>
            Based on the information in the SIP request attempts to determine the end point the request should
            be sent to.
            </summary>
        </member>
        <!-- 对于成员“T:SIPSorcery.GB28181.SIP.SIPURI”忽略有格式错误的 XML 注释 -->
        <member name="M:SIPSorcery.GB28181.SIP.SIPURI.ToParameterlessString">
            <summary>
            Returns a string representation of the URI with any parameter and headers ommitted except for the transport
            parameter. The string returned by this function is used amonst other things to match Route headers set by this
            SIP agent.
            </summary>
            <returns>A string represenation of the URI with headers and parameteres ommitted except for the trnaport parameter if it is required.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.SIPURI.ToAOR">
            <summary>
            Returns an address of record for the SIP URI which is a string in the format user@host.
            </summary>
            <returns>A string representing the address of record for the URI.</returns>
        </member>
        <member name="P:SIPSorcery.GB28181.SIP.SIPURI.Protocol">
            <summary>
            The protocol for a SIP URI is dicatated by the scheme of the URI and then by the transport parameter and finally by the 
            use fo a default protocol. If the URI is a sips one then the protocol must be TLS. After that if there is a transport
            parameter specified for the URI it dictates the protocol for the URI. Finally if there is no transport parameter for a sip
            URI then the default UDP transport is used.
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.SIP.SIPURI.CanonicalAddress">
            <summary>
            Returns a string that can be used to compare SIP URI addresses.
            </summary>
        </member>
        <!-- 对于成员“T:SIPSorcery.GB28181.SIP.SIPUserField”忽略有格式错误的 XML 注释 -->
        <member name="M:SIPSorcery.GB28181.SIP.CallProperties.CreateNewCSeq">
            <summary>
            创建CSeq
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.SIP.CallProperties.CreateBranchId(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            From RFC 3261, Section 16.6, Step 8.
            The value placed in this part of the branch parameter SHOULD reflect all of those fields (including any Route, Proxy-Require and Proxy-
            Authorization header fields).  This is to ensure that if the request is routed back to the proxy and one of those fields
            changes, it is treated as a spiral and not a loop (see Section 16.3). 
            A common way to create this value is to compute a cryptographic hash of the To tag, From tag, Call-ID header
            field, the Request-URI of the request received (before translation), the topmost Via header, and the sequence number
             from the CSeq header field, in addition to any Proxy-Require algorithm used to compute the hash is implementation-dependent,
            but MD5 (RFC 1321 [35]), expressed in hexadecimal, is a  reasonable choice.  (Base64 is not permissible for a token.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.AppState.ConfigureConsoleLogger">
            <summary>
            Configures the logging object to use a console logger. This would normally be used
            as a fallback when either the application does not have any logging configuration
            or there is an error in it.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.AppState.GetConfigSetting(System.String)">
            <summary>
            Wrapper around the object holding the application configuration settings extracted
            from the App.Config file.
            </summary>
            <param name="key">The name of the configuration setting wanted.</param>
            <returns>The value of the configuration setting.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.AppState.LoadCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean)">
            <summary>
            Attempts to load an X509 certificate from a Windows OS certificate store.
            </summary>
            <param name="storeLocation">The certificate store to load from, can be CurrentUser or LocalMachine.</param>
            <param name="certificateSubject">The subject name of the certificate to attempt to load.</param>
            <param name="checkValidity">Checks if the certificate is current and has a verifiable certificate issuer list. Should be
            set to false for self issued certificates.</param>
            <returns>A certificate object if the load is successful otherwise null.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.AppState.ToAbsoluteFilePath(System.String)">
            <summary>
            Checks whether a file path represents a relative or absolute path and if it's relative converts it to
            an absolute one by prefixing it with the application's base directory.
            </summary>
            <param name="filePath">The file path to check.</param>
            <returns>An absolute file path.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.AppState.ToAbsoluteDirectoryPath(System.String)">
            <summary>
            Checks whether a directory path represents a relative or absolute path and if it's relative converts it to
            an absolute one by prefixing it with the application's base directory.
            </summary>
            <param name="directoryPath">The directory path to check.</param>
            <returns>An absolute directory path.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.AppState.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Handler for processing the App.Config file and retrieving a custom XML node.
            </summary>
        </member>
        <member name="M:Aza.Configuration.Crypto.GetHash(System.String)">
            <summary>
            This vesion reads the whole file in at once. This is not great since it can consume
            a lot of memory if the file is large. However a buffered approach generates
            diferrent hashes across different platforms.
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:Aza.Configuration.Crypto.GetFileStream(System.String)">
            <summary>
            Used by methods wishing to perform a hash operation on a file. This method
            will perform a number of checks and if happy return a read only file stream.
            </summary>
            <param name="filepath">The path to the input file for the hash operation.</param>
            <returns>A read only file stream for the file or throws an exception if there is a problem.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.Crypto.GetRandomInt">
            <summary>
            Returns a 10 digit random number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.Crypto.GetRandomInt(System.Int32)">
            <summary>
            Returns a random number of a specified length.
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.Crypto.GetHash(System.String)">
            <summary>
            This vesion reads the whole file in at once. This is not great since it can consume
            a lot of memory if the file is large. However a buffered approach generates
            diferrent hashes across different platforms.
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.Crypto.GetFileStream(System.String)">
            <summary>
            Used by methods wishing to perform a hash operation on a file. This method
            will perform a number of checks and if happy return a read only file stream.
            </summary>
            <param name="filepath">The path to the input file for the hash operation.</param>
            <returns>A read only file stream for the file or throws an exception if there is a problem.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.Crypto.GetRandomByteString(System.Int32)">
            <summary>
            Gets an "X2" string representation of a random number.
            </summary>
            <param name="byteLength">The byte length of the random number string to obtain.</param>
            <returns>A string representation of the random number. It will be twice the length of byteLength.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.Crypto.GetSHAHashAsHex(System.String[])">
            <summary>
            Returns the hash with each byte as an X2 string. This is useful for situations where
            the hash needs to only contain safe ASCII characters.
            </summary>
            <param name="values">The list of string to concantenate and hash.</param>
            <returns>A string with "safe" (0-9 and A-F) characters representing the hash.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.PasswordHash.GenerateSalt(System.Nullable{System.Int32})">
            <summary>
            Generates a salt that can be used to generate a password hash. The salt is a combination of a block of bytes to represent the 
            salt entropy and an integer that represents the interation count to feed into the RFC289 algorithm used to derive the password hash.
            The iterations count is used to slow down the hash generating alrogithm to mitigate brute force and rainbow table attacks.
            </summary>
            <param name="explicitIterations">The number of iterations used to derive the password bytes. Must be greater than the constant specifying the minimum iterations.</param>
            <returns>A string it the format iterations.salt.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.PasswordHash.Hash(System.String,System.String)">
            <summary>
            Generates the password hash from the password and salt. THe salt must be in the format iterations.salt.
            </summary>
            <param name="value">The value to generate a hash for.</param>
            <param name="salt">The salt (and iteration count) to generate the hash with.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Aza.Configuration.IPSocketAddress.GetIPEndPoint(System.String)">
            <summary>
            Returns an IPv4 end point from a socket address in 10.0.0.1:5060 format.
            </summary>>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.ByteBufferInfo.GetStringPosition(System.Byte[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Searches a buffer for a string up until a specified end string.
            </summary>
            <param name="buffer">The byte array to search for an instance of the specified string.</param>
            <param name="startPosition">The position in the array that the search should be started from.</param>
            <param name="endPosition">An index that if reached indicates the search should be halted.</param>
            <param name="find">The string that is being searched for.</param>
            <param name="end">If the end string is found the search is halted and a negative result returned.</param>
            <returns>The start position in the buffer of the requested string or -1 if not found.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.Net.FreePort.FindNextAvailableTCPPort(System.Int32)">
            <summary>
            Check if startPort is available, incrementing and
            checking again if it's in use until a free port is found
            </summary>
            <param name="startPort">The first port to check</param>
            <returns>The first available port</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.Net.FreePort.FindNextAvailableUDPPort(System.Int32)">
            <summary>
            Check if startPort is available, incrementing and
            checking again if it's in use until a free port is found
            </summary>
            <param name="startPort">The first port to check</param>
            <returns>The first available port</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.IPSocket.GetIPEndPoint(System.String)">
            <summary>
            Returns an IPv4 end point from a socket address in 10.0.0.1:5060 format.
            </summary>>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.IPSocket.IsPrivateAddress(System.String)">
             <summary>
             Checks the Contact SIP URI host and if it is recognised as a private address it is replaced with the socket
             the SIP message was received on.
             
             Private address space blocks RFC 1597.
            		10.0.0.0        -   10.255.255.255
            		172.16.0.0      -   172.31.255.255
            		192.168.0.0     -   192.168.255.255
            
             </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.NetServices.GetDefaultGateway">
            <summary>
            Extracts the default gateway from the route print command
            </summary>
            <returns>The IP Address of the default gateway.</returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.NetServices.GetDefaultIPAddress(System.Net.IPAddress)">
            <summary>
            Attempts to get the local IP address that is being used with the default gateway and is therefore the one being used
            to connect to the internet.
            </summary>
            <param name="defaultGateway"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.NetServices.CallRoute">
            <summary>
            Calls the operating system command 'route print' to obtain the IP
            routing information.
            </summary>
            <returns>A string holding the output of the command.</returns>
        </member>
        <!-- 对于成员“M:SIPSorcery.GB28181.Sys.NetServices.CallShellCommand(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:SIPSorcery.GB28181.Sys.IPv4Header">
             <summary>
                 0                   1                   2                   3   
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |Version|  IHL  |Type of Service|          Total Length         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |         Identification        |Flags|      Fragment Offset    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |  Time to Live |    Protocol   |         Header Checksum       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                       Source Address                          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                    Destination Address                        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                    Options                    |    Padding    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            
             </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.UDPPacket">
            <summary>
             0      7 8     15 16    23 24    31  
             +--------+--------+--------+--------+ 
             |     Source      |   Destination   | 
             |      Port       |      Port       | 
             +--------+--------+--------+--------+ 
             |                 |                 | 
             |     Length      |    Checksum     | 
             +--------+--------+--------+--------+ 
             |                                     
             |          data octets ...            
             +---------------- ...            
             
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.TimeConvert">
            <summary>
            日期/时间戳转换
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.TimeConvert.DateToTimeStamp(System.DateTime)">
            <summary>
            日期类型转换为时间戳
            返回自1970年以来的秒数
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.TimeConvert.TimeStampToDate(System.UInt32)">
            <summary>
            时间戳转换为日期类型
            返回自1970以来的时间
            </summary>
            <param name="timestamp">时间戳(1147763686)</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.TypeExtensions.IsNullOrBlank(System.String)">
            <summary>    
            Gets a value that indicates whether or not the collection is empty.    
            </summary>    
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.Catalog">
            <summary>
            设备目录信息
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.XmlHelper`1.t">
            <summary>
            存储对象
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.XML.XmlHelper`1.Serialize(`0)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.XML.XmlHelper`1.Deserialize(System.String)">
            <summary>
            反序列
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.GB28181.Sys.XML.XmlHelper`1.Read(System.String)">
            <summary>
            读取文件并返回并构建成类
            </summary>
            <param name="xmlBody">XML文档</param>
            <returns>需要返回的类型格式</returns>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Instance">
            <summary>
            单例模式访问
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.CmdType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.SN">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.DeviceID">
            <summary>
            设备编码
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.SumNum">
            <summary>
            设备总条数
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.DeviceList">
            <summary>
            列表显示条数
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.Catalog.DevList">
            <summary>
            设备列表
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.DevList.Items">
            <summary>
            设备项
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.Catalog.Item">
            <summary>
            设备信息
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.DeviceID">
            <summary>
            设备编码
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Name">
            <summary>
            设备名称
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.CatalogType">
            <summary>
            目录类型
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Manufacturer">
            <summary>
            制造商
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Model">
            <summary>
            型号
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Owner">
            <summary>
            设备归属
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.CivilCode">
            <summary>
            行政区域码
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Block">
            <summary>
            警区
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Address">
            <summary>
            安装地址
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Parental">
            <summary>
            是否有子设备，1有，0没有
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.ParentID">
            <summary>
            父设备ID(可选)
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.SafetyWay">
            <summary>
            信令安全模式，0：不采用，2：S/MIME签名方式 3：S/MIME加密签名 4数字摘要方式(可选) 
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.RegisterWay">
            <summary>
            符合sip3261标准的认证注册方式，2：基于口令的双向认证方式，3：基于数字证书的双向认证方式
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.CertNum">
            <summary>
            证书序列号（可选）
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Certifiable">
            <summary>
            证书有效标志，0无效，1有效(可选)
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.ErrCode">
            <summary>
            证书无效原因码(可选)
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.EndTime">
            <summary>
            证书终止有效期(可选)
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Secrecy">
            <summary>
            保密属性，0：不涉密，1涉密
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.IPAddress">
            <summary>
            设备IP（可选）
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Port">
            <summary>
            端口(可选)
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Password">
            <summary>
            设备密码（可选）
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Status">
            <summary>
            设备状态
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Longitude">
            <summary>
            精度(可选)
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.Catalog.Item.Latitude">
            <summary>
            纬度(可选)
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.DevStatus">
            <summary>
            设备状态
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.DevStatus.ON">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.DevStatus.OFF">
            <summary>
            故障
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.CatalogQuery">
            <summary>
            目录检索
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.CatalogQuery.Instance">
            <summary>
            单例模式访问
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.CatalogQuery.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.CatalogQuery.SN">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.CatalogQuery.DeviceID">
            <summary>
            设备编码
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.Keepalive">
            <summary>
            心跳
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.Catalog">
            <summary>
            设备目录
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.Play">
            <summary>
            视频直播
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.Playback">
            <summary>
            录像点播
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.DeviceControl">
            <summary>
            设备控制
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.Alarm">
            <summary>
            警告通知
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.DeviceInfo">
            <summary>
            设备信息
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.DeviceStatus">
            <summary>
            设备状态
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.RecordInfo">
            <summary>
            文件检索
            </summary>
        </member>
        <member name="F:SIPSorcery.GB28181.Sys.XML.CommandType.Download">
            <summary>
            文件下载
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.KeepAlive">
            <summary>
            心跳请求
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.KeepAlive.Instance">
            <summary>
            单例模式访问
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.KeepAlive.CmdType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.KeepAlive.DeviceID">
            <summary>
            设备编码
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.KeepAlive.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.RecordQuery">
            <summary>
            录像文件查询
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.Instance">
            <summary>
            以单例模式访问
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.CmdType">
            <summary>
            指令类型
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.SN">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.DeviceID">
            <summary>
            设备编码
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.Address">
            <summary>
            录像地址
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.Secrecy">
            <summary>
            保密属性 0不涉密 1涉密
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.Type">
            <summary>
            录像产生类型 time alarm manual all
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordQuery.RecorderID">
            <summary>
            录像产生者ID
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.RecordInfo">
            <summary>
            录像信息
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Instance">
            <summary>
            以单例模式访问
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.CmdType">
            <summary>
            指令类型
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.SN">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.DeviceID">
            <summary>
            设备编码
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Name">
            <summary>
            设备名称
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.SumNum">
            <summary>
            录像总条数
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.RecordItems">
            <summary>
            录像列表
            </summary>
        </member>
        <member name="T:SIPSorcery.GB28181.Sys.XML.RecordInfo.RecordList">
            <summary>
            录像列表信息
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.RecordList.Items">
            <summary>
            设备项
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.DeviceID">
            <summary>
            设备编码
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.Name">
            <summary>
            录像名称
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.Address">
            <summary>
            录像地址
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.Secrecy">
            <summary>
            保密属性 0不涉密 1涉密
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.Type">
            <summary>
            录像产生类型 time alarm manual all
            </summary>
        </member>
        <member name="P:SIPSorcery.GB28181.Sys.XML.RecordInfo.Item.RecorderID">
            <summary>
            录像产生者ID
            </summary>
        </member>
    </members>
</doc>
